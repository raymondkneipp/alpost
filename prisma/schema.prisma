// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Site {
  id        String @id @default(cuid())
  name      String
  subdomain String @unique
  // Theme
  color     Color  @default(BLACK)
  radius    Radius @default(REGULAR)
  // Social media
  facebook  String @default("")
  instagram String @default("")
  twitter   String @default("")
  youtube   String @default("")
  // Address
  street    String @default("")
  city      String @default("")
  state     String @default("")
  zip       String @default("")

  news News[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model News {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  title     String   @db.VarChar(100)
  content   String   @db.VarChar(2000)
  site      Site?    @relation(fields: [siteId], references: [id])
  siteId    String?
}

enum Color {
  BLACK
  SLATE
  GRAY
  ZINC
  NEUTRAL
  STONE
  RED
  ORANGE
  AMBER
  YELLOW
  LIME
  GREEN
  EMERALD
  TEAL
  CYAN
  SKY
  BLUE
  INDIGO
  VIOLET
  PURPLE
  FUCHSIA
  PINK
  ROSE
}

enum Radius {
  NONE
  SMALL
  REGULAR
  MEDIUM
  LARGE
  XL
  XXL
  XXXL
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  site          Site?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
